#pragma once
#include "utils.dl"

.decl EntryPoint(simplename:symbol, descriptor:symbol, class:Class)
.decl Reachable(method:Method, step:number)
.decl SinkDesc(simplename:symbol, class:Class)
.decl SinkMethod(method:Method)
.decl EntryMethod(method:Method)
.decl BanCaller(method:Method)

// 最终求解的CallGraph
.decl CallGraph(insn:Insn, caller:Method, callee:Method)

// 初始化 SinkMethod
// SinkDesc 更好描述，一般从手动输入，生成SinkMethod
// 注意这里的逻辑，关联上了其子类的
SinkMethod(method) :-
    SinkDesc(simplename, class),
    SubEqClass(subeqclass, class),
    !MethodModifier("abstract", method),
    MethodInfo(method, simplename, _, subeqclass, _, _, _).

// 初始化 EntryMethod 和 Reachable
EntryMethod(method),
Reachable(method, 0) :- 
    EntryPoint(simplename, descriptor, class),
    Dispatch(simplename, descriptor, class, method).

// 针对SpecialMethodInvocation的处理，SpecialMethodInvocation 是针对super，以及构造函数的处理
// 如果caller method内部调用了callee，那么callee加入Reachable，且把对应的call 加入CallGraph
// 这里有个MAXSTEP 限制
Reachable(callee, n+1),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    SpecialMethodInvocation(insn, _, callee, _, caller).

// StaticMethodInvocation 也类似
Reachable(callee, n+1),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    StaticMethodInvocation(insn, _, callee, caller).

// VirtualMethodInvocation 最主要的逻辑
// 针对在
// 1. caller方法中，receiver.method()
// 2. caller 本已是可达的，且不在黑名单
// 3. method 属于class或者其子类subeqclass，receiver 类型和class类型相同。注意这里只取了子类。
// 那么，认为该method在subeqclass中所有相关callee的有可能，把callee加入Reachable，对应call加入CallGraph
Reachable(callee, n+1),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    VirtualMethodInvocation(insn, _, method, receiver, caller),
    MethodInfo(method, simplename, _, _, _, descriptor, _),
    VarType(receiver, class),
    SubEqClass(subeqclass, class),
    !ClassModifier("abstract", subeqclass),
    Dispatch(simplename, descriptor, subeqclass, callee).

// 针对doPrivileged 覆盖的调用，StaticMethodInvocation只是用来限制 AccessController#doPrivileged的
// doPrivileged 的第一个参数是一个匿名类，该类有run接口，实际上是运行的该run接口，也就是method
// 1. 获取该doPrivileged 方法的第一个参数param
// 2. 该param 是class类，也就是匿名类（注意这里类似是jimple，不是源码概念，自动生成的）
// 3. 该匿名class 一定有个run 方法
// 将该run转为对应的callee加入Reachable，及CallGraph
Reachable(callee, n+1),
CallGraph(insn, caller, callee) :- 
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    StaticMethodInvocation(insn, _, method, caller),
    MethodInfo(method, "doPrivileged", _, "java.security.AccessController", _, _, _),
    ActualParam(0, insn, param),
    VarType(param, class),
    MethodInfo(callee, "run", _, class, _, _, 0).

// 下面是CHA优化逻辑，具体要参考 [cha-optimization](docs/cha-optimization.md)
// CHA的结果是一个有向图，一般做法是将其放入图形数据库进行检索，周知CHA无漏报但是有误报，如果CHA结果过大，会造成检索困难
// 师傅从以下方面进行了优化，引入Sink点，只关注Sink点的逻辑
// 1. 减少节点的数量
// 2. 减少环路的出现

// CHAO is CHA OPTIMIZATION LEVEL
// CHAO 1 返回的是所有能到sink的节点
// CHAO 2 返回的是entry到sink最短路径上的节点
// 不定义，则不做优化，返回所有
#if CHAO > 0

// 从entry出发，表示method 经过step 步能调用到sink。
.decl SinkReachable(method:Method, sink:Method, step:number)

// 初始化，用SinkMethod
SinkReachable(sink, sink, 0) :-
    SinkMethod(sink).

// 类推
SinkReachable(caller, sink, n+1) :-
    n < MAXSTEP,
    SinkReachable(callee, sink, n),
    CallGraph(_, caller, callee).

#endif

#if CHAO > 1
// 表示caller 经过最短step步 到达 sink
.decl ShortestPathToSink(caller:Method, sink:Method, step:number)

// 初始化，从SinkReachable 中获取entry到sink最小的step记录，注意这里的min 用法
ShortestPathToSink(entry, sink, n) :-
    n = min step : {SinkReachable(entry, sink, step)},
    SinkMethod(sink),
    EntryMethod(entry).

// 以上只是entry到sink，并没有中间节点，这里补充中间节点
// 如果caller 到 sink 最短距离 为 n
// 且calle 到 sink 的距离为n-1
// 且caller 调用 callee
// 那么可以推导出callee 到sink 的最短距离为 n-1
ShortestPathToSink(callee, sink, n-1) :-
    n < MAXSTEP + 1,
    ShortestPathToSink(caller, sink, n),
    SinkReachable(callee, sink, n-1),
    CallGraph(_, caller, callee).

#endif

// 重新定义可达方法
.decl RefinedReachable(method:Method)

#ifdef CHAO
    #if CHAO == 1
        RefinedReachable(method) :-
            SinkReachable(method, _, _).
    #endif
    #if CHAO == 2
        RefinedReachable(method) :-
            ShortestPathToSink(method, _, _).
    #endif
#else
    RefinedReachable(method) :-
        Reachable(method, _).
#endif

// 最终的输出结果，节点
.decl CallNode(node:Method, label:symbol)
.output CallNode

CallNode(node, "method") :-
    !EntryMethod(node),
    !SinkMethod(node),
    RefinedReachable(node).

CallNode(node, "sink") :-
    RefinedReachable(node),
    SinkMethod(node).

CallNode(node, "entry") :-
    RefinedReachable(node),
    EntryMethod(node).

// 最终的输出结果，调用边
.decl CallEdge(caller:Method, callee:Method)
.output CallEdge

CallEdge(caller, callee) :-
    RefinedReachable(caller),
    RefinedReachable(callee),
    CallGraph(_, caller, callee).
