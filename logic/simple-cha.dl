#pragma once
#include "utils.dl"

// EntryPoint：入口点，一般在应用时定义
.decl EntryPoint(simplename:symbol, descriptor:symbol, class:Class)
// Reachable：从入口点，能够调用到的方法，包含该method和对应的步数
.decl Reachable(method:Method, step:number)
// SinkDesc：就是SinkMethod，知不是分成了class和simple那么来表示，和SinkMethod的method一个意思，看用法一般是在应用定义
.decl SinkDesc(simplename:symbol, class:Class)
// SinkMethod：Sink方法，Method 是method.facts 第一个字段，类似method signature
.decl SinkMethod(method:Method)
// EntryMethod：入口方法
.decl EntryMethod(method:Method)
// CallGraph：调用关系，caller为调用方method，callee为被调用method，todo insn？
.decl CallGraph(insn:Insn, caller:Method, callee:Method)
// SimpleCallGraph：todo
.decl SimpleCallGraph(insn:Insn, caller:Method, callee:Method)
// ChaGraph：todo
.decl ChaGraph(caller:Method, implementation:Method, callee:Method)

// BanCaller: 禁用，java.util类的相关方法
.decl BanCaller(method:Method)
.output BanCaller

BanCaller(method) :-
    MethodInfo(method, simplename, _, class, _, _, _),
    contains("java.util", class).

SinkMethod(method) :-
    SinkDesc(simplename, class),
    SubEqClass(subeqclass, class),
    !MethodModifier("abstract", method),
    MethodInfo(method, simplename, _, subeqclass, _, _, _).

EntryMethod(method),
Reachable(method, 0) :- 
    EntryPoint(simplename, descriptor, class),
    Dispatch(simplename, descriptor, class, method).

Reachable(callee, n+1),
SimpleCallGraph(insn, caller, callee),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    SpecialMethodInvocation(insn, _, callee, _, caller).

Reachable(callee, n+1),
SimpleCallGraph(insn, caller, callee),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    StaticMethodInvocation(insn, _, callee, caller).

Reachable(method, n+1),
Reachable(callee, n+1),
SimpleCallGraph(insn, caller, method),
CallGraph(insn, caller, callee) :-
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    VirtualMethodInvocation(insn, _, method, receiver, caller),
    MethodInfo(method, simplename, _, _, _, descriptor, _),
    VarType(receiver, class),
    SubEqClass(subeqclass, class),
    !ClassModifier("abstract", subeqclass),
    Dispatch(simplename, descriptor, subeqclass, callee).

Reachable(callee, n+1),
SimpleCallGraph(insn, caller, callee),
CallGraph(insn, caller, callee) :- 
    Reachable(caller, n),
    !BanCaller(caller),
    n < MAXSTEP,
    StaticMethodInvocation(insn, _, method, caller),
    MethodInfo(method, "doPrivileged", _, "java.security.AccessController", _, _, _),
    ActualParam(0, insn, param),
    VarType(param, class),
    MethodInfo(callee, "run", _, class, _, _, 0).

ChaGraph(caller, implementation, callee) :-
    Reachable(caller, _),
    MethodInfo(caller, simplename, _, class, _, descriptor, _),
    SubClass(subclass, class),
    Dispatch(simplename, descriptor, subclass, implementation),
    caller != implementation,
    SimpleCallGraph(_, implementation, callee).

.output ChaGraph

.decl CallNode(node:Method, label:symbol)
.output CallNode

CallNode(node, "method") :-
    !EntryMethod(node),
    !SinkMethod(node),
    Reachable(node, _).

CallNode(node, "sink") :-
    Reachable(node, _),
    SinkMethod(node).

CallNode(node, "entry") :-
    Reachable(node, _),
    EntryMethod(node).

.decl CallEdge(caller:Method, callee:Method)
.output CallEdge

CallEdge(caller, callee) :-
    SimpleCallGraph(_, caller, callee).
